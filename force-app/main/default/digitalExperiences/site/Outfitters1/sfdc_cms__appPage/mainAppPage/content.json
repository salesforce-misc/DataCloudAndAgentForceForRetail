{
  "type" : "sfdc_cms__appPage",
  "title" : "main",
  "contentBody" : {
    "currentThemeId" : "B2B_Commerce",
    "headMarkup" : "<link rel=\"stylesheet\" href=\"{ basePath }/assets/styles/salesforce-lightning-design-system.min.css?{ versionKey }\"/>\n<link rel=\"stylesheet\" href=\"{ basePath }/assets/styles/dxp-site-spacing-styling-hooks.min.css?{ versionKey }\" />\n<link rel=\"stylesheet\" href=\"{ basePath }/assets/styles/dxp-styling-hooks.min.css?{ versionKey }\" /><!-- branding stylesheets -->\n\n\n<!--<link rel=\"stylesheet\" href=\"{ basePath }/assets/styles/dxp-slds-extensions.min.css?{ versionKey }\" />-->\n\n\n\n<link rel=\"preload\" href=\"{ basePath }/assets/fonts/webfonts/SalesforceSans-Light.woff2\" as=\"font\" type=\"font/woff2\" crossorigin=\"anonymous\" fetchPriority=\"low\"/>\n<link rel=\"preload\" href=\"{ basePath }/assets/fonts/webfonts/SalesforceSans-Regular.woff2\" as=\"font\" type=\"font/woff2\" crossorigin=\"anonymous\" fetchPriority=\"low\"/>\n<link rel=\"preload\" href=\"{ basePath }/assets/fonts/webfonts/SalesforceSans-Bold.woff2\" as=\"font\" type=\"font/woff2\" crossorigin=\"anonymous\" fetchPriority=\"low\"/>\n<!-- branding stylesheets -->\n\n<!-- branding stylesheets -->\n\n<!-- General -->\n<link rel=\"shortcut icon\" href=\"{basePath}/assets/favicon.ico?{versionKey}\">\n<link rel=\"stylesheet\" href=\"{basePath}/assets/css/theme2.css?{versionKey}\">\n<link rel=\"stylesheet\" href=\"{ styles/styles.css }\" />\n\n<!-- branding stylesheets -->\n\n<!-- General -->\n<link rel=\"shortcut icon\" href=\"{basePath}/assets/favicon.ico?{versionKey}\">\n\n<link rel=\"stylesheet\" href=\"{ styles/styles.css }\" />\n<style>\n    /* Target standard Experience Cloud logo class */\n    .branding-logo {\n        float: left; /* Align to left */\n        width: 200px !important; /* Adjust width as needed */\n        height: auto;\n        max-width: 100%;\n        margin-right: 20px; /* Optional spacing */\n    }\n\n    /* Optionally adjust the container (sometimes needed) */\n    .site-logo, .branding-logo-container, .comm-navigation__logo, .header-logo {\n        display: flex !important;\n        justify-content: flex-start !important;\n        align-items: center !important;\n    }\n     .class {\n       font-size: 32px;\n    }\n    .heading-text-block {\n  font-size: 2.5rem;\n  font-weight: bold;\n  line-height: 1.2;\n}\n    .comm-login-form__login-button {\n        color: white !important;\n    }\n    .comm-self-register__submit-button {\n        color: white !important;\n    }  \n   .comm-forgot-password__submit-button {\n        color: white !important;\n    }\n\n</style>\n\n<script type='text/javascript'>\nvar user;\n//Listening to the Custom Event published by the LWC\nwindow.addEventListener('userDetails', function(e){\nconsole.log('user details: ' + JSON.stringify(e.detail));\nuser = e.detail;\n});\n\n//These hidden prechat parameters can be sent to the Omni Flow for different u\n window.addEventListener(\"onEmbeddedMessagingReady\",e => {\n     embeddedservice_bootstrap.prechatAPI.setHiddenPrechatFields({\n\"UserID\": user.id,\n\"User_Email\": user.email,\n\"ContactId\": user.contactId\n});\n });\n</script>\n\n<script>\n    document.dispatchEvent(\n        new CustomEvent('experience_interaction', {\n            bubbles: true,\n            composed: true,\n            detail: {\n            name: 'set-consent',\n            value: true,\n        },\n        })\n    );\n</script>\n\n<script>\n  window.addEventListener('onEmbeddedMessagingReady', () => {\n    // Returns true if the URL is a Visualforce page like:\n    // https://*.vf.force.com/apex/ReturnLabelPage?...\n    const isVisualforceApexUrl = (urlObj) => {\n      try {\n        const hostHasVf = /\\.vf\\.force\\.com$/i.test(urlObj.hostname) || urlObj.hostname.includes(\".vf.force.com\");\n        const pathHasApex = urlObj.pathname.toLowerCase().includes(\"/apex/\");\n        return hostHasVf && pathHasApex;\n      } catch (_) {\n        return false;\n      }\n    };\n\n    const handler = (evt) => {\n      try {\n        if (evt && typeof evt.preventDefault === 'function') evt.preventDefault();\n        if (evt && typeof evt.stopPropagation === 'function') evt.stopPropagation();\n        if (evt && typeof evt.stopImmediatePropagation === 'function') evt.stopImmediatePropagation();\n\n        const d = (evt && evt.detail) ? evt.detail : {};\n        let href =\n          d.url ||\n          (d.link && (d.link.href || d.link)) ||\n          (typeof d.detail === 'string' ? d.detail : null);\n\n        // Fallback: extract markdown link [text](url) if present\n        if (!href && typeof d.entryPayload === 'string') {\n          try {\n            const payload = JSON.parse(d.entryPayload);\n            const text = payload?.abstractMessage?.staticContent?.text || '';\n            const m = text.match(/\\]\\(([^)\\s]+)\\)/);\n            if (m && m[1]) href = m[1];\n          } catch (_) {}\n        }\n\n        if (!href) return;\n\n        // Normalize to absolute URL\n        let urlObj;\n        if (/^https?:\\/\\//i.test(href)) {\n          urlObj = new URL(href);\n        } else if (/^(mailto:|tel:)/i.test(href)) {\n          window.location.assign(href);\n          return;\n        } else {\n          urlObj = new URL(href, window.location.origin);\n        }\n\n        // NEW: open VF /apex links in a new tab, others same tab\n        if (isVisualforceApexUrl(urlObj)) {\n          const win = window.open(urlObj.toString(), '_blank', 'noopener,noreferrer');\n          if (win) win.opener = null;\n        } else {\n          window.location.assign(urlObj.toString());\n        }\n      } catch (e) {\n        console && console.debug && console.debug('link override failed', e);\n      }\n    };\n\n    window.addEventListener('onEmbeddedMessageLinkClicked', handler, { capture: true, passive: false });\n  });\n</script>",
    "isLockerServiceEnabled" : true,
    "isRelaxedCSPLevel" : true,
    "templateName" : "b2b-storefront"
  },
  "urlName" : "main"
}